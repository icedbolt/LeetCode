class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = {c:[] for c in range(numCourses)}
        for u, v in prerequisites:
            graph[u].append(v)

        # A course has 3 possibilities.
        # visited - u has been added to res
        # visiting - u not added to res, but added to cycle
        # unvisited - u not added to res or cycle
        res = []
        vis, cycle = set(), set()
        def dfs(node):
            if node in cycle:
                return False
            if node in vis:
                return True
            cycle.add(node)
            for neighbour in graph[node]:
                if not dfs(neighbour):
                    return False
            cycle.remove(node)
            vis.add(node)
            res.append(node)
            return True
        
        for c in range(numCourses):
            if not dfs(c):
                return []
        return res
