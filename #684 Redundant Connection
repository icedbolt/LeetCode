class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        def dfs(node, target, vis):
            if node == target:
                return True
            vis.add(node)
            for neighbour in graph[node]:
                if neighbour not in vis:
                    if dfs(neighbour, target, vis):
                        return True
            return False

        graph = defaultdict(list)         # Initialize the graph as an adjacency list
        for u, v in edges:
            vis = set()
            if u in graph and v in graph and dfs(u, v, vis):
                return [u, v]
            graph[u].append(v)
            graph[v].append(u)
        
/* Input: edges = [[1, 2], [1, 3], [2, 3]]
Execution:
Add edge [1, 2]. Graph: {1: [2], 2: [1]}
Add edge [1, 3]. Graph: {1: [2, 3], 2: [1], 3: [1]}
For edge [2, 3], DFS finds that 2 and 3 are already connected through 1. This edge is redundant. */
