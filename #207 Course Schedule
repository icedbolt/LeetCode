class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = defaultdict(list)
        for u, v in prerequisites:    # Map each course to pre requisite
            graph[u].append(v)
        
        vis = set()

        def dfs(node):
            if node in vis:
                return False
            if graph[node] == []:      # Courses with no pre requisite
                return True
            vis.add(node)
            for neighbour in graph[node]:
                if not dfs(neighbour): return False
            vis.remove(node)
            graph[node] = []
            return True
        
        for node in range(numCourses):
            if not dfs(node): return False
        return True
