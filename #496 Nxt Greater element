# Brute Force
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        res = []
        for n in nums1:
            found = False
            for i in range(nums2.index(n) + 1, len(nums2)):
                if nums2[i] > n:
                    res.append(nums2[i])
                    found = True
                    break
            if not found:
                res.append(-1)
        
        return res
-------------------------------------------------------------------------------------
// Using stack & hashmap - Optimal
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<>();
        HashMap<Integer, Integer> mp = new HashMap<>();
        int[] res = new int[nums1.length];

        for (int i = nums2.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && stack.peek() <= nums2[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                mp.put(nums2[i], stack.peek());
            } else {
                mp.put(nums2[i], -1);
            }
            stack.push(nums2[i]);
        }

        for (int i = 0; i < nums1.length; i++) {
            res[i] = mp.get(nums1[i]);
        }
        return res;
    }
}
