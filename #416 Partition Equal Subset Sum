// Java
class Solution {
    public boolean canPartition(int[] nums) {
        int totalSum = 0;

        // Calculate total sum of the array
        for (int num : nums) {
            totalSum += num;
        }

        // If the total sum is odd, we cannot partition it into two equal subsets
        if (totalSum % 2 != 0) {
            return false;
        }

        int target = totalSum / 2;
        boolean[] dp = new boolean[target + 1];
        dp[0] = true;  // A sum of 0 is always possible

        for (int num : nums) {
            // Update dp array from right to left (to avoid overwriting results for the same number in the same iteration).
            for (int j = target; j >= num; j--) {
                dp[j] = dp[j] || dp[j - num];
            }
        }

        return dp[target];
    }
}

// T = O(n * target)
// S = O(target)
