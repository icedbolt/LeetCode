class Solution:
    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        # ans = No. of connected components - 1
        if len(connections) < n - 1:
            return -1
            
        graph = defaultdict(list)
        for u, v in connections:
            graph[u].append(v)
            graph[v].append(u)
        
        vis = set()
        def dfs(node):
            vis.add(node)
            for nei in graph[node]:
                if nei not in vis:
                    dfs(nei)
        
        connected_comp = 0
        for i in range(n):
            if i not in vis:
                dfs(i)
                connected_comp += 1
        
        return connected_comp - 1
---------------------------------------------------------------------------------------------------------
// Java
class Solution {
    public int makeConnected(int n, int[][] connections) {
        // If there are fewer than n - 1 edges, it's impossible to connect the network
        if (connections.length < n - 1) {
            return -1;
        }
        
        // Create an adjacency list to represent the graph
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] connection : connections) {
            graph.get(connection[0]).add(connection[1]);
            graph.get(connection[1]).add(connection[0]);
        }
        
        // Perform DFS to count the number of connected components
        boolean[] visited = new boolean[n];
        int connectedComponents = 0;
        
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(i, graph, visited);
                connectedComponents++;
            }
        }
        
        // The answer is the number of connected components - 1
        return connectedComponents - 1;
    }
    
    private void dfs(int node, List<List<Integer>> graph, boolean[] visited) {
        visited[node] = true;
        for (int neighbor : graph.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, graph, visited);
            }
        }
    }
}
