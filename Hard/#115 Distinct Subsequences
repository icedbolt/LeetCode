class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        cache = {}

        def dfs(i, j):
            if j == len(t):  # Successfully matched all of t
                return 1
            if i == len(s):  # Reached the end of s without matching all of t
                return 0
            if (i, j) in cache:  # Use cached result if available
                return cache[(i, j)]
            
            if s[i] == t[j]:  # Match case
                cache[(i, j)] = dfs(i + 1, j + 1) + dfs(i + 1, j)
            else:  # No match, skip s[i]
                cache[(i, j)] = dfs(i + 1, j)
            return cache[(i, j)]
        
        return dfs(0, 0)
