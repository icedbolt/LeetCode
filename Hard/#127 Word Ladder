class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        words = set(wordList)
        if endWord not in words:
            return 0
        
        vis = set()
        res = 0
        queue = deque([beginWord])

        while queue:
            size = len(queue)
            for _ in range(size):
                s = queue.popleft()
                if s == endWord:
                    return res+1
                for i in range(len(s)):
                    original_char = s[i]
                    for c in 'abcdefghijklmnopqrstuvwxyz':
                        if c == original_char:
                            continue
                        s = s[:i] + c + s[i+1:]          # Replace character
                        if s in words and s not in vis:          # Add to queue if it's valid and not visited
                            queue.append(s)
                            vis.add(s)
                    s = s[:i] + original_char + s[i+1:]          # Restore the original string
            res += 1
        return 0
