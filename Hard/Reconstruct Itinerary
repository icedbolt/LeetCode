class Solution:
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        adj = defaultdict(list)
        tickets.sort()        # Sort tickets to ensure lexicographical order.

        for src, dst in tickets:
            adj[src].append(dst)
        
        res = []
        def dfs(node):
            while adj[node]:
                nxt_node = adj[node].pop(0)        # Remove and process the first destination.
                dfs(nxt_node)
            res.append(node)        # Nodes are appended to the result after all their neighbors have been explored.

        dfs("JFK")
        return res[::-1]          # Since nodes are added in reverse order during DFS, the final result is reversed to get the correct itinerary.
