class Solution:
    def maxSumBST(self, root: Optional[TreeNode]) -> int:
        self.max_sum = 0

        def dfs(node):
            # Base case: empty tree is a valid BST
            if not node:
                return (True, 0, float('inf'), float('-inf'))
            
            left_is_bst, left_sum, left_min, left_max = dfs(node.left)
            right_is_bst, right_sum, right_min, right_max = dfs(node.right)
            
            # Check if the current tree is a BST
            if left_is_bst and right_is_bst and left_max < node.val < right_min:
                subtree_sum = node.val + left_sum + right_sum
                self.max_sum = max(self.max_sum, subtree_sum)
                return (True, subtree_sum, min(node.val, left_min), max(node.val, right_max))
            else:
                # Not a BST, return invalid range
                return (False, 0, float('-inf'), float('inf'))
        
        dfs(root)
        return self.max_sum
