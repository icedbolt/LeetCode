from collections import defaultdict

class Solution:
    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:
        # Step 1: Initialize graph and degree array
        graph = defaultdict(set)
        degree = [0] * (n + 1)
        
        for u, v in edges:
            graph[u].add(v)
            graph[v].add(u)
            degree[u] += 1
            degree[v] += 1
        
        # Step 2: Find connected trios and their degree
        min_degree = float('inf')
        
        # Iterate through all pairs (u, v)
        for u in range(1, n + 1):
            for v in graph[u]:
                if v > u:  # Ensure unique pair processing
                    # Check for common neighbors (potential trios)
                    for w in graph[u].intersection(graph[v]):
                        # Calculate the degree of the trio
                        trio_degree = degree[u] + degree[v] + degree[w] - 6
                        min_degree = min(min_degree, trio_degree)
        
        # Step 3: Return the result
        return min_degree if min_degree != float('inf') else -1
