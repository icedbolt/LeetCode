class Solution:
    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:
        # Step 1: Build the adjacency list for the dependency graph.
        adj = defaultdict(list)
        for src, dst in relations:
            adj[src].append(dst)
        
        # Dictionary to store the maximum time to complete all courses starting from a node.
        max_time = {}
        
        # Step 2: Define a DFS function to calculate the time for each node.
        def dfs(src):
            # If we've already computed the max time for this node, return it.
            if src in max_time:
                return max_time[src]
            
            # Base time to complete the current course.
            res = time[src - 1]
            
            # Explore all dependent courses and calculate the max time.
            for nei in adj[src]:
                res = max(res, time[src - 1] + dfs(nei))
            
            # Memoize the result for this node to avoid recomputation.
            max_time[src] = res
            return res
        
        # Step 3: Run DFS for all courses.
        for i in range(1, n + 1):
            dfs(i)
        
        # Step 4: The answer is the maximum time needed among all courses.
        return max(max_time.values())
