# Using DFS
class Solution:
    def shortestPathLength(self, graph: List[List[int]]) -> int:
        n = len(graph)
        queue = deque([(i, 0, {i}) for i in range(n)])      # (current node, distance, visited set)
        vis = set((i, frozenset([i])) for i in range(n))

        while queue:
            node, dist, visited = queue.popleft()

            if len(visited) == n:
                return dist

            for nei in graph[node]:
                new_visited = visited | {nei}       # Creates a new set with the union of visited and {neighbor}.
                state = (nei, frozenset(new_visited))

                if state not in vis:
                    vis.add(state)
                    queue.append((nei, dist + 1, new_visited))
        return -1
