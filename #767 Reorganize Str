#Amazon
class Solution:
  def reorganizeStr(self, str: s) -> str:
    count = Counter(s)    #create a hashmap with key as character & its frequency as a value
    maxHeap = [[-cnt, char] for char, cnt in count.items()]    #Python doesn't support min heap, setting the count with -ve value
    heapq.heapify(maxHeap)    #transform the data (array) to max heap structure

    prev = None          #store previously stored char & use it to store its count if can't be used immediately
    res = ""

    while maxHeap or prev:
      if prev and not maxHeap:
        return ""
      cnt, char = heapq.heappop(maxHeap)
      res += char
      cnt += 1

      if prev:
        heapq.heappush(maxHeap, prev)    #push back the character that was used earlier & not yet reinserted into the heap. 
        prev = None

      if cnt != 0:      #if count of current element is not 0, there are still occurances of that char left.
        prev = [cnt, char]

    return res
----------------------------------------------------------------------------------------------------------------------------
//Java
class Solution {
    public String reorganizeString(String s) {
        // Count frequency of each character
        Map<Character, Integer> countMap = new HashMap<>();
        for (char c : s.toCharArray()) {
            countMap.put(c, countMap.getOrDefault(c, 0) + 1);
        }

        //Use a priority queue to store characters by frequency
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> b[0] - a[0]);  

        /* (a, b) -> b[0] - a[0]) is a lambda expression that defines a custom comparator for the 'PriorityQueue'. The comparator
        determines the order of the elements in the queue. b[0] - a[0] ensures that the array with the larger first element is 
        considered 'smaller' in terms of priority. This effectively truns 'PriorityQueue' into a max-heap.
        - If b[0] > a[0], the result will be positive, meaning b has a higher priority and should come before a.
        - If b[0] < a[0], the result will be negative, meaning a has a higher priority and should come before b.
        - If b[0] == a[0], the result will be zero, and their order will not change relative to each other.*/ 

        for (Map.Entry<Character, Integer> entry : countMap.entrySet()) {
            maxHeap.offer(new int[]{entry.getValue(), entry.getKey()});
        }

        StringBuilder res = new StringBuilder();
        int[] prev = null;

        while (! maxHeap.isEmpty() || prev != null) {
            if (prev != null && maxHeap.isEmpty()) {
                return "";
            }

            int[] current = maxHeap.poll();
            res.append((char) current[1]);
            current[0]--;

            if (prev != null) {
                maxHeap.offer(prev);
                prev = null;
            }

            if (current[0] != 0) {
                prev = current;
            }
        }
        return res.toString();
    }
}
