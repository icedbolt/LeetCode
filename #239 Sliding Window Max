// Java - O(n)
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        Deque<Integer> dq = new ArrayDeque<>();    // Store indices of array elements
        List<Integer> res = new ArrayList<>();

        for (int i = 0; i < k; i++) {
            while (!dq.isEmpty() && nums[i] >= nums[dq.getLast()]) {
                dq.removeLast();
            }
            dq.addLast(i);
        }

        for (int i = k; i < nums.length; i++) {
            res.add(nums[dq.getFirst()]);

            while (!dq.isEmpty() && dq.getFirst() <= i - k) {     // check if the current index is within the window size  
                dq.removeFirst();
            }

            while (!dq.isEmpty() && nums[i] >= nums[dq.getLast()]) {
                dq.removeLast();
            }
            dq.addLast(i);
        }
        res.add(nums[dq.getFirst()]);

        return res.stream().mapToInt(i -> i).toArray();

    /*  int[] resultArray = new int[res.size()];
        for (int i = 0; i < res.size(); i++) {
            resultArray[i] = res.get(i);
        }
        return resultArray;  */

    }
}
------------------------------------------------------------------------------------------------------------
# Python
from collections import deque

class Solution:
    def maxSlidingWindow(self, nums, k):
        dq = deque()
        res = []

        for i in range(k):
            while dq and nums[i] >= nums[dq[-1]]:
                dq.pop()
            dq.append(i)

        for i in range(k, len(nums)):
            res.append(nums[dq[0]])

            while dq and dq[0] <= i - k:
                dq.popleft()

            while dq and nums[i] >= nums[dq[-1]]:
                dq.pop()
            dq.append(i)

        res.append(nums[dq[0]])
        return res
