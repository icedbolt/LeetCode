/* 
Brute Force O(n^3)
Iterate over all substring:
  Calculate freq array.
  Compare with freq array of P.
  Update min.
*/

// Java - O(n), using frequency array and sliding window:

// Create frequency array and compare the freq of required charaters.

class Solution {
    public String minWindow(String s, String t) {
        int n = s.length(), m = t.length();
        int[] freqS = new int[256];
        int[] freqT = new int[256];
        for (int i = 0; i < t.length(); i++) {
            freqT[t.charAt(i)]++;             // Populate freqT. 
        }

        int i = 0, j = 0, starti = -1, cnt = 0, minLen = Integer.MAX_VALUE;
        while (j < n) {
            freqS[s.charAt(j)]++;
            if (freqT[s.charAt(j)] > 0 && freqS[s.charAt(j)] <= freqT[s.charAt(j)]) {
                cnt++;   
            }
            if (cnt == m) {    // Start minimizing the window.
                while (freqS[s.charAt(i)] > freqT[s.charAt(i)]) {
                    freqS[s.charAt(i)]--;    // Start dropping extra characters.
                    i++;
                }
                int len = j - i + 1;
                if (len < minLen) {
                    minLen = len;
                    starti = i;      // Start index of the subarray.
                }
            }
            j++;
        }
        if (starti == -1) {
            return "";
        }
        return s.substring(starti, starti + minLen);
    }
}
