class Solution {
    public int[][] kClosest(int[][] points, int k) {
        // custom comparator makes the queue act like a max heap with respect to the distance from the origin. This means the point with the largest distance will be at the top of the queue.
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Double.compare(distance(b), distance(a)));
        int[][] res = new int[k][2];

        for (int[] point : points) {
            pq.offer(point);        // Each point is added to the priority queue.
            if (pq.size() > k) {
                pq.poll();          // if the size of the priority queue exceeds k, the point which is farthest from the origin is removed.
            }
        }
        
        for(int i = 0; i < k; i++) {
            res[i] = pq.poll();
        }

        return res;
    }

    private double distance(int[] point) {
        return Math.sqrt(point[0] * point[0] + point[1] * point[1]);      // Calculate distance of the point from origin.
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------
// Math
class Solution {
    public int[][] kClosest(int[][] points, int k) {
        ArrayList<int[]> dist = new ArrayList<>();
        for (int[] point: points) {
            int x = point[0];
            int y = point[1];
            int d = x * x + y * y;
            dist.add(new int[]{d, x, y});
        }

        dist.sort((a, b) -> Integer.compare(a[0], b[0]));

        int[][] res = new int[k][2];
        for (int i = 0; i < k; i++) {
            res[i][0] = dist.get(i)[1];
            res[i][1] = dist.get(i)[2];
        }
        return res;
    }
}
