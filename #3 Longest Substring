def lengthOfLongestSubstring(self, s: str) -> int:
    ans = 0
    l = 0
    charSet = set()
    for r in range(len(s)):
        while s[r] in charSet:
            charSet.remove(s[l])
            l += 1
        charSet.add(s[r])
        ans = max(ans,  r - l + 1)
    return ans
---------------------------------------------------------------------
S = O(1)  T = O(N)

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) == 0 or len(s) == 1:
            return len(s)
        
        maxLen = 0
        f = [0] * 256
        l, r = 0, 0
        while r < len(s):
            if f[ord(s[r])]:
                while f[ord(s[r])]:
                    f[ord(s[l])] = False
                    l += 1
            f[ord(s[r])] = True
            maxLen = max(maxLen, r-l+1)
            r += 1
        return maxLen
-----------------------------------------------------------------------------
// Java - Using sliding window & dynamic frequency array
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s.length() == 0 || s.length() == 1) {
            return s.length();
        }
        int res = 0;
        boolean[] f = new boolean[256];
        int l = 0, r = 0;
        while (r < s.length()) {
            if (f[s.charAt(r)]) {
                while (f[s.charAt(r)]) {
                    f[s.charAt(l)] = false;        // Mark unvisited
                    l++;
                }
            }
            f[s.charAt(r)] = true;
            res = Math.max(res, r-l+1);
            r++;
        }
        return res;
    }
}
