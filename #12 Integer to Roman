//Java
class Solution {
    public String intToRoman(int num) {
        TreeMap<Integer, String> map = new TreeMap<>();

        map.put(1000, "M");
        map.put(900, "CM");
        map.put(500, "D");
        map.put(400, "CD");
        map.put(100, "C");
        map.put(90, "XC");
        map.put(50, "L");
        map.put(40, "XL");
        map.put(10, "X");
        map.put(9, "IX");
        map.put(5, "V");
        map.put(4, "IV");
        map.put(1, "I");

        int l = map.floorKey(num);
        if (num == l) {
            return new String(map.get(num));
        }

        return new String(map.get(l) + intToRoman(num-l));
    }
}
--------------------------------------------&&------------------------------------------------------------
class Solution {
    public String intToRoman(int num) {
        String[][] roman = {{"I", "1"}, {"IV", "4"}, {"V", "5"}, {"IX", "9"}, {"X", "10"}, {"XL", "40"},
                            {"L", "50"}, {"XC", "90"}, {"C", "100"}, {"CD", "400"}, {"D", "500"}, {"CM", "900"},
                            {"M", "1000"}};
        StringBuilder res = new StringBuilder();

        for (int i = roman.length - 1; i >= 0; i--) {
            String sym = roman[i][0];
            int val = Integer.parseInt(roman[i][1]);

            // Determine how many times the symbol should be repeated
            while (num >= val) {
                res.append(sym);
                num -= val;
            }
        }

        return res.toString();

    }
}
------------------------------------------------------------------------------------------------------
#Python
class Solution:
    def intToRoman(self, num: int) -> str:
        roman = [["I", 1], ["IV", 4], ["V", 5], ["IX", 9], ["X", 10], ["XL", 40], ["L", 50], ["XC", 90], ["C", 100],
                ["CD", 400], ["D", 500], ["CM", 900], ["M", 1000]]
        res = ""

        # Process each symbol-value pair in reverse order. 
        for sym, val in reversed(roman):
            if num // val:
                # Determine how many times the symbol should be repeated.
                count = num // val
                res += sym * count
                num = num % val
        return res
