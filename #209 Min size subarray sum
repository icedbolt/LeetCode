# Brute Force, nested loop - O(n^2)
class Solution:
  def minSubArrayLen(self, target: int, nums: List[int]) -> int:
    res = float('inf')
    for i in range(len(nums)):
        sum = 0
        for j in range(i, len(nums)):
            sum += nums[j]
            if sum >= target:
                res = min(res, j - i + 1)
                break
    if res == float('inf'):
        return 0
    else:
        return res
---------------------------------------------------------------------------------------------------
# sliding window O(n)
def minSubArrayLen(self, target: int, nums: List[int]) -> int:
    res = float('inf')
    l = 0
    sum = 0

    for r in range(len(nums)):
        sum += nums[r]

        while sum >= target:
            res = min(res, r - l + 1)
            sum -= nums[l]
            l += 1

    return res if res != float('inf') else 0
