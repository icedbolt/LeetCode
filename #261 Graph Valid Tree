from typing import List

class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        if len(edges) != n - 1:
            return False  # A valid tree must have exactly n - 1 edges
        
        # Build the graph as an adjacency list
        graph = {i: [] for i in range(n)}
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)
        
        # Perform BFS or DFS to check connectivity
        visited = set()
        
        def dfs(node, parent):
            if node in visited:
                return False  # Found a cycle
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor == parent:
                    continue  # Skip the edge we just came from
                if not dfs(neighbor, node):
                    return False
            return True
        
        # Start DFS from node 0
        if not dfs(0, -1):
            return False
        
        # Check if all nodes were visited (graph is connected)
        return len(visited) == n
