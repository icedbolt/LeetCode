def isValid(self, s: str) -> bool:
    map = {')': '(', '}' : '{', ']': '['}
    open_brc = ['(', '[', '{']
    stack = []
    
    for brc in s:
        if brc in open_brc:
            stack.append(brc)
        else:
            if stack and stack[-1] == map[brc]:
                stack.pop()
            else:
                return False
    if stack:
        return False
    return True
--------------------------------------------------------------------------------------------------------------------------
def isValid(self, s: str) -> bool:
    if len(s) == 1:
        return False
    brackets = [')', ']', '}']
    stack = []
    for i in s:
        if (i == '(') or (i == '[') or (i == '{'):
            stack.append(i)
        elif len(stack) == 0:
            return False
        elif (i == ')' and stack.pop != '(') or (i == ']' and stack.pop != '[') or (i == } and stack.pop != '{'):
            return False
    for j in stack:
        if j not in brackets:                #for the cases like: s = '))'
            return False
    return True
---------------------------------------------------------------------------------------------------------------------------------
//Java
class Solution {
    public boolean isValid(String s) {
        if (s.length() == 1) {
            return false;
        }

        Stack<Character> stack = new Stack<>();
        char[] brackets = {'(', '[', '{'};

        for (char i : s.toCharArray()) {
            if (i == '(' || i == '[' || i == '{') {
                stack.push(i);
            } else if (stack.isEmpty()) {
                return false;
            } else if ((i == ')' && stack.pop() != '(') ||
                        (i == ']' && stack.pop() != '[') ||
                        (i == '}' && stack.pop() != '{')) {
                return false;
            }
        }
        return stack.isEmpty();
    }
}
