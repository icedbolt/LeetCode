class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if self.find(root, p) and self.find(root, q):
            return self.solve(root, p, q)
        return None

    # This function checks whether p exists in the tree rooted at root.
    def find(self, root, p):
        if root is None:
            return False
        return root == p or self.find(root.left, p) or self.find(root.right, p)
    
    def solve(self, root, p, q):
        if root is None:
            return root
        if root == p or root == q:
            return root
        left = self.solve(root.left, p , q)
        right = self.solve(root.right, p , q)

        if left is not None and right is not None:
            return root
        if not left:
            return right
        return left
