class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        # create a min heap with k largest elements
        self.minHeap, self.k = nums, k
        heapq.heapify(self.minHeap)
        while len(self.minHeap) > k:
            heapq.heappop(self.minHeap)

    def add(self, val: int) -> int:
        heapq.heappush(self.minHeap, val)
        if len(self.minHeap) > self.k:
            heapq.heappop(self.minHeap)
        return self.minHeap[0]

/* Create a min heap of all element in nums and pop elements until size of the minHeap becomes k. In this way, we get min heap of k character only, 
with smallest (Kth largest) at the root which will be minHeap[0] */

---------------------------------------------------------------------------------------------------------------------------------------------------
//Java
class KthLargest {

    PriorityQueue<Integer> minHeap;
    int k;

    public KthLargest(int k, int[] nums) {
        this.k = k;
        this.minHeap = new PriorityQueue<>();

        //Add all elements to minHeap, maintaining the size of the heap as k
        for (int num : nums) {
            minHeap.offer(num);
            if (minHeap.size() > k) {
                minHeap.poll();         // remove the smallest element if heap size exceeds k
            }
        }
    }
    
    public int add(int val) {
        minHeap.offer(val);
        if (minHeap.size() > k) {
            minHeap.poll();
        }
        return minHeap.peek();      //The Kth largest element is at the root of the min heap
    }
}


