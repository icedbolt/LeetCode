class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        solve(nums, res, 0);
        return res;
    }

    public void solve(int[] a, List<List<Integer>> res, int idx) {
        if (idx == a.length) {
            List<Integer> perm = new ArrayList<>();
            for (int num : a) {
                perm.add(num);
            }
            res.add(perm);
            return;
        }

        HashSet<Integer> used = new HashSet<>();
        for (int i = idx; i < a.length; i++) {
            if (used.contains(a[i])) continue; // Skip duplicate numbers
            used.add(a[i]);
            swap(a, idx, i);
            solve(a, res, idx + 1);
            swap(a, idx, i);
        }
    }

    public void swap(int[] a, int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}
--------------------------------------------------------------------------------------------------
// For string with dplicate charaters
// input: abc
// output: abc, acb, cab, cba, bac, bca
import java.util.*;

class Solution {
    public void solve(String s) {
        ArrayList<String> res = new ArrayList<>();
        char[] arr = s.toCharArray();
        Arrays.sort(arr);
        solveHelper(arr, res, 0);
        for (String st: res) {
          System.out.println(st);
        }
    }

    public void solveHelper(char[] s, List<String> res, int i) {
        if (i == s.length) {
            res.add(new String(s));
            return;
        }

        HashSet<Character> used = new HashSet<>();
        for (int j = i; j < s.length; j++) {
            if (used.contains(s[j])) continue; // Skip duplicates
            used.add(s[j]);
            swap(s, j, i);
            solveHelper(s, res, i + 1);
            swap(s, j, i); // Backtrack
        }
    }

    public void swap(char[] s, int i, int j) {
        char temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
}
