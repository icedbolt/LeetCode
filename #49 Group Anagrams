class Solution:
  def groupAnagrams(self, strs: List(str)) -> List[List[str]]:
    res = defaultdict(list)    #create a default dict where each value is an empty list.

    #O(nlogn) - time

    for s in strs:
      key = ''.join(sorted(s))    #sort the string and use it as a key
      res[key].append(s)             #append the original string s corresponding to it's key

    return res.values()        #return the list of lists

-----------------------------------------------------------------------------
//Java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> res = new HashMap<>();

        for (String s : strs) {
            char[] charArray = s.toCharArray();
            Arrays.sort(charArray);
            String key = new String(charArray); 

            if (!res.containsKey(key)) {
                res.put(key, new ArrayList<>());
            }
            res.get(key).add(s);
        }
        return new ArrayList<>(res.values());

       
    }
}
--------------------------------------------------------------------------------------
res = defaultdict(list)

#O(1) - space

for s in strs:
  count = [0] * 26                   #initialize a list of 26 zeroes, one for each letter a ... z

  for c in s:
    count[ord(c) - ord('a')] += 1    #calculating the ASCII value
  res[tuple(count)].append(s)

  return res.values
