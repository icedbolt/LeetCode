// Java
import java.util.*;

class Solution {
    public int maximumDetonated(int[][] bombs) {
        int n = bombs.length;
        // Build adjacency list
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
            for (int j = 0; j < n; j++) {
                if (i != j && canTrigger(bombs[i], bombs[j])) {
                    graph.get(i).add(j);
                }
            }
        }

        int maxBombs = 0;
        // Try detonating from each bomb
        for (int i = 0; i < n; i++) {
            boolean[] visited = new boolean[n];
            maxBombs = Math.max(maxBombs, dfs(graph, i, visited));
        }

        return maxBombs;
    }

    // Check if bomb A can trigger bomb B
    private boolean canTrigger(int[] a, int[] b) {
        long dx = a[0] - b[0];
        long dy = a[1] - b[1];
        long distanceSquared = dx * dx + dy * dy;
        long radiusSquared = (long) a[2] * a[2];
        return distanceSquared <= radiusSquared;
    }

    // DFS to count detonations
    private int dfs(List<List<Integer>> graph, int node, boolean[] visited) {
        visited[node] = true;
        int count = 1;
        for (int neighbor : graph.get(node)) {
            if (!visited[neighbor]) {
                count += dfs(graph, neighbor, visited);
            }
        }
        return count;
    }
}
