# Topological Sort
class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = {c:[] for c in range(numCourses)}
        for u, v in prerequisites:
            graph[u].append(v)

        # A course has 3 possibilities.
        # visited - u has been added to res
        # visiting - u not added to res, but added to cycle
        # unvisited - u not added to res or cycle
        res = []
        vis, cycle = set(), set()
        def dfs(node):
            if node in cycle:
                return False
            if node in vis:
                return True
            cycle.add(node)
            for neighbour in graph[node]:
                if not dfs(neighbour):
                    return False
            cycle.remove(node)
            vis.add(node)
            res.append(node)
            return True
        
        for c in range(numCourses):
            if not dfs(c):
                return []
        return res
-----------------------------------------------------------------------------------------------------------
// Java - Topological Sort.
class Solution {
    List<Integer> res = new ArrayList<>();
    Set<Integer> vis = new HashSet<>();
    Set<Integer> cycle = new HashSet<>();
    Map<Integer, List<Integer>> graph = new HashMap<>();   // Create an adjacency list to represent the graph 
    
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        for (int i = 0; i < numCourses; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] pair : prerequisites) {
            graph.get(pair[0]).add(pair[1]);
        }

        // perform DFS for each course
        for (int i = 0; i < numCourses; i++) {
            if (!dfs(i)) {
                return new int[0];      // Return empty array if cycle is detected
            }
        }

        int[] order = new int[res.size()];
        for (int i = 0; i < res.size(); i++) {
            order[i] = res.get(i);
        }
        return order;
    }

    // Define a recursive DFS function
    private boolean dfs(int node) {
        if (cycle.contains(node)) {
            return false;    // Cycle detected
        }
        if (vis.contains(node)) {
            return true;     // node already processed
        }

        cycle.add(node);
        for (int neighbour: graph.get(node)) {
            if (!dfs(neighbour)) {
                return false;     // cycle detected in neighbour
            }
        }
        
        cycle.remove(node);
        vis.add(node);
        res.add(node);
        return true;
    }
}
