class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        if not heights or not heights[0]:
            return []

        rows, cols = len(heights), len(heights[0])

        # Helper function to perform DFS
        def dfs(row, col, visited, prev_height):
            # Base cases
            if (
                row < 0 or row >= rows or
                col < 0 or col >= cols or
                (row, col) in visited or
                heights[row][col] < prev_height
            ):
                return
            
            visited.add((row, col))
            for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:  # Directions: right, down, left, up
                dfs(row + dr, col + dc, visited, heights[row][col])

        # Sets to keep track of cells that can reach each ocean
        pacific_reachable = set()
        atlantic_reachable = set()

        # Perform DFS from the edges
        for col in range(cols):
            dfs(0, col, pacific_reachable, heights[0][col])  # Top edge (Pacific)
            dfs(rows - 1, col, atlantic_reachable, heights[rows - 1][col])  # Bottom edge (Atlantic)

        for row in range(rows):
            dfs(row, 0, pacific_reachable, heights[row][0])  # Left edge (Pacific)
            dfs(row, cols - 1, atlantic_reachable, heights[row][cols - 1])  # Right edge (Atlantic)

        # Intersection of reachable cells
        result = list(pacific_reachable & atlantic_reachable)
        return result
